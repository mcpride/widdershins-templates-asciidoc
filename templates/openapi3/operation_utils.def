{{

function getCodeSamples(data, mediatype) {
    if (!mediatype && data.consumes && data.consumes.length) mediatype = data.consumes[0];
    let s = '';
    const op = data.operation||data.message;
    if (op && op["x-code-samples"]) {
        for (var c in op["x-code-samples"]) {
            var sample = op["x-code-samples"][c];
            var lang = languageCheck(sample.lang, data.header.language_tabs, true);
            s += generateCodeSnippet(lang, sample.source);
        }
    }
    else {
        const samplesGenerator = (data.options.httpsnippet ||
           ((mediatype||'').startsWith('multipart/')
            && !data.options.user_templates && data.options.experimental))
            ? httpsnippetGenerator.generate
            : fileTemplateGenerator;

        const codeSamples = data.header.language_tabs
            .map(tab => {
                const lang = typeof tab === 'object'
                    ? Object.keys(tab)[0]
                    : tab;

                const lowerCaseLanguage = languageCheck(lang, data.header.language_tabs, false);
                const target = getLanguageTarget(lowerCaseLanguage);
                const client = getLanguageClient(lang, data.options.language_clients);

                const sample = (target && samplesGenerator(target, client, data)) || '';
                return (sample && generateCodeSnippet(lang, lowerCaseLanguage, sample)) || '';
            });

        s += codeSamples.join('');
    }
    return s;
}

function languageCheck(language, language_tabs, mutate) {
    var lcLang = language.toLowerCase();
    if (lcLang === 'c#') lcLang = 'csharp';
    if (lcLang === 'c++') lcLang = 'cpp';
    for (var l in language_tabs) {
        var target = language_tabs[l];
        if (typeof target === 'object') {
            if (Object.keys(target)[0] === lcLang) {
                return lcLang;
            }
        }
        else {
            if (target === lcLang) return lcLang;
        }
    }
    if (mutate) {
        var newLang = {};
        newLang[lcLang] = language;
        language_tabs.push(newLang);
        return lcLang;
    }
    return false;
}

function getLanguageTarget(lang) {
    return (lang && lang.split('--')[1]) || lang;
}

function getLanguageClient(lang, clients) {
    if (!(lang && clients && clients.length)) return '';
    const client = clients.find(function(e,i,a){
      return Object.keys(e)[0] === lang;
    });
    if (client) return Object.values(client)[0];
    return '';
}

function fileTemplateGenerator(target, client, data) {
    const templateName = getCodeSampleTemplateName(target);
    const templateFunc = data.templates[templateName];
    return (templateFunc && templateFunc(data)) || '';
}

function getCodeSampleTemplateName(target) {
    return `code_${target}`;
}

function generateCodeSnippet(langName, lang, code) {
    const snippetSeparator = '----';
    return `\n\n====\n${langName.toUpperCase()}:\n\n[source,${lang}]\n${snippetSeparator}\n${code}\n\n${snippetSeparator}\n====\n`;
}

}}